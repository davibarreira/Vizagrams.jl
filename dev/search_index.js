var documenterSearchIndex = {"docs":
[{"location":"tutorials/2_custommarks/#Working-with-Graphical-Marks","page":"2 - Custom Marks","title":"Working with Graphical Marks","text":"","category":"section"},{"location":"tutorials/2_custommarks/","page":"2 - Custom Marks","title":"2 - Custom Marks","text":"In Vizagrams, every drawing is, in final analysis, just a collection of graphical primitives. These primitives are geometric shapes such as circles, lines, polygons, and so on. A graphical mark is a subtype of the abstract type Mark for which there exists a function that turns it into a diagram, in other words, a mark is a data type for which we can represent as a diagram.","category":"page"},{"location":"tutorials/2_custommarks/","page":"2 - Custom Marks","title":"2 - Custom Marks","text":"Note that, according to this definition, every primitive shape is itself a mark, since the output diagram is just themselves. Hence, when we define a diagram using primitives, this is equivalent to be using marks.","category":"page"},{"location":"tutorials/2_custommarks/#1.-Introducing-Existing-Marks","page":"2 - Custom Marks","title":"1. Introducing Existing Marks","text":"","category":"section"},{"location":"tutorials/2_custommarks/","page":"2 - Custom Marks","title":"2 - Custom Marks","text":"Vizagrams already comes with several graphical marks ready to use. Some of these graphical marks are just the primitive geometric shapes such as circles, lines, polygons, Bezier curves, while others are more complex, such as arrows, faces, and so on.","category":"page"},{"location":"tutorials/2_custommarks/","page":"2 - Custom Marks","title":"2 - Custom Marks","text":"Let us start by listing all the available marks that come with Vizagrams. Some of them are used internally, hence one does not need to worry about it.","category":"page"},{"location":"tutorials/2_custommarks/","page":"2 - Custom Marks","title":"2 - Custom Marks","text":"using Vizagrams\nusing InteractiveUtils\nsubtypes(Mark)","category":"page"},{"location":"tutorials/2_custommarks/","page":"2 - Custom Marks","title":"2 - Custom Marks","text":"Note that many of the existing marks involve data visualization components, such as ticks, axes, legen and so on. We are not going to use them now, as our goal is not to introduce the data visualization aspects of Vizagram. Let us instead start with some simpler examples:","category":"page"},{"location":"tutorials/2_custommarks/","page":"2 - Custom Marks","title":"2 - Custom Marks","text":"d = Arrow()\n\ndraw(d, height=100)","category":"page"},{"location":"tutorials/2_custommarks/","page":"2 - Custom Marks","title":"2 - Custom Marks","text":"When we draw an instance of Arrow, we are drawing a line together with a triangle. The advantage of encapsulating into a mark is that we can specify how to parametrize in order to get the desired behavior. This becomes clearer in the next example:","category":"page"},{"location":"tutorials/2_custommarks/","page":"2 - Custom Marks","title":"2 - Custom Marks","text":"d = Face() → Face(eyestyle=S(:fill=>:red)) → Face(smile=1) → Face(smilestyle=S(:strokeDasharray=>2),smile=-1) → Face(headstyle=S(:fill=>:grey))\ndraw(d, height=100)","category":"page"},{"location":"tutorials/2_custommarks/","page":"2 - Custom Marks","title":"2 - Custom Marks","text":"Note that the mark Face has parameters that allows us to modify some of its features, but not everything. The overall \"shape\" of the face is kept.","category":"page"},{"location":"tutorials/2_custommarks/","page":"2 - Custom Marks","title":"2 - Custom Marks","text":"We can combine different marks in the same diagram.","category":"page"},{"location":"tutorials/2_custommarks/","page":"2 - Custom Marks","title":"2 - Custom Marks","text":"angles = 0:π/10:π\nd = Face(smile=0.5) + mapreduce(a->R(a)Arrow(pts=[[1,0],[2,0]],headsize=a/10),+, angles) + S(:fill=>:grey)T(0,-1.5)*Rectangle(h=1,w=2)\n\ndraw(d,height=200)","category":"page"},{"location":"tutorials/2_custommarks/#2.-Creating-Custom-Marks","page":"2 - Custom Marks","title":"2. Creating Custom Marks","text":"","category":"section"},{"location":"tutorials/2_custommarks/","page":"2 - Custom Marks","title":"2 - Custom Marks","text":"Besides the marks provided in Vizagrams, users can create their own marks and use them to create diagrams. The process of mark creation can be divided in two steps. First, the user must create a new data type and make it a subtype of Mark, which is the abstract type provided by Vizagrams. Secondly, the user must define a function ζ (\\zeta). This ζ function is the one responsible for turning the new mark into a diagram.","category":"page"},{"location":"tutorials/2_custommarks/","page":"2 - Custom Marks","title":"2 - Custom Marks","text":"import Vizagrams: ζ\n\nstruct Tree <: Mark\n    h #parameter that specifies the height of the tree\nend\nTree(;h=2) = Tree(h)\n\n# Specifying how to draw a tree\nfunction ζ(tree::Tree)\n    # grabbing the height for the tree\n    height = tree.h\n\n    # defining a diagram for the trunk\n    trunk = S(:fill=>:brown)T(0,height/2)*Rectangle(h=height,w=0.5)\n\n    # drawing the leaves\n    angles = collect(0:0.7:2π)\n    leaves = S(:fill=>:green)*(\n        Circle(r=0.5)+\n        mapreduce(x->T(cos(x)*(0.5),sin(x)*(0.5))Circle(r=0.3),+,angles)\n        )\n    \n    # combining the trunk and the leaves to draw the tree\n    return trunk + T(0,height)leaves\nend\n\nd = Tree(h=2) → Tree(h=4)\ndraw(d)","category":"page"},{"location":"tutorials/2_custommarks/","page":"2 - Custom Marks","title":"2 - Custom Marks","text":"The power of creating marks is that we can now use them to create other marks. Hence, we can gradually increase the complixity of our marks. Let us use our tree mark to define a forest.","category":"page"},{"location":"tutorials/2_custommarks/","page":"2 - Custom Marks","title":"2 - Custom Marks","text":"using Random\n\nstruct Forest <: Mark\n    n\nend\n\nForest(;n=2) = Forest(n)\nfunction ζ(m::Forest)\n    Random.seed!(4)\n    n = m.n\n    pos = 2 .* rand(n,2).-1\n    pos = pos[sortperm(pos[:,2],rev=true),:]\n    trees = mapreduce(x->T(x...)U(0.1)*Tree(),+, eachrow(pos))\n    return trees+S(:fillOpacity=>0.1)*(Square(l=2.5))\n\nend\n\ndraw(Forest(50))","category":"page"},{"location":"tutorials/4_expressiveness/#Graphic-Expressions","page":"4 - Graphic Expressions","title":"Graphic Expressions","text":"","category":"section"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"It is time to move to more complex graphics. This can be achieved through the use of graphic expressions which are contained in the graphic parameter of the plot specification.","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"In data visualization, our goal is to represet data as a diagram (drawing) such that we can infer information about the data from the image generated. For this to work, we need a \"sensible\" way of mapping data to graphical marks. This \"sensible\" way of converting data to diagrams is done in Vizagrams through graphic expressions. The ideia of a graphic expression is that the way we draw graphics can be divided in three components:","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"Coalgebra - This describes how to traverse the data, e.g. we can traverse the data row by row, or we can group it by a given column;\nExpression - This is a function that says how to take a portion of the data (e.g. a row) and express it as a diagram;\nAlgebra - This describes how to combine the diagrams produced by each chunk of data.","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"The graphic expression can be written in a mathematical notation as:","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"beginaligned\n    expr  textDatato textDiagram \n    alg  textDiagramto textDiagram \n    coalg  textDatato textData\nendaligned","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"For those without a mathematical mindset, this might look awfully complicated, but hopefully we can dispel some of the confusion with some examples.","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"using Vizagrams\nusing DataFrames\nusing Statistics\nusing Random\nusing VegaDatasets\ndf = DataFrame(dataset(\"cars\"));\n\n# We need to drop missing values, as Vizagrams does not handle them yet.\ndf = dropmissing(df);","category":"page"},{"location":"tutorials/4_expressiveness/#1.-Scatter-Plots-v.s.-Line-Plots","page":"4 - Graphic Expressions","title":"1. Scatter Plots v.s. Line Plots","text":"","category":"section"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"In a scatter plot, the process of drawing the graphic is distinct from that of a line plot. How so? Suppose we have a dataset with x, y and color values. For the scatter plot, we traverse the dataset row by row, drawing a circle in position (x,y) with a given color for each row. Hence, the number of circles (or any other mark used to represent a point) will be drawn N times, where N is the number of rows in the dataset. For the line plot, what we actually want is to group the rows in the dataset with the same color value, and then, draw a line with such color passing through all these rows.","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"In terms of graphic expressions, for the scatter plot we have:","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"    sum_textiterate by row^+ textS(stroke=rowcolor)*textCircle(c=rowxrowy)","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"where we iterate over each row, creating a circle mark and then summing them together. Note that the result of the above equation is equal to:","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"textS(stroke=data1color)*textCircle(c=data1xdata1y) +   +textS(stroke=dataNcolor)*textCircle(c=dataNxdataNy) ","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"The idea is that data[n,:x] means picking row n column :x for the dataset.","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"Now, for the line plot, we have:","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"    sum^+_textgroup by colortextS(stroke=rowscolor1)*textLine(rowsxrowsy)","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"Note that, in this case, we are not iterating over each row, instead, we are grouping the data by the color values. Each iteration contains many rows, thus, rows.x is actually a list of values in column x. Since each iteration has the same value for color, we use rows.color[1] to get a single color value, and use it to color the whole line.","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"In tutorial 3, we have shown how to create scatter plots and line plots simply by picking a mark such as Circle or Line. Under the hood, what Vizagrams was doing was to infer the graphic expressions for such marks. Now, let us instead pass the actual graphic expression:","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"gdf = combine(groupby(df,[:Year,:Origin]),:Horsepower=>mean,:Miles_per_Gallon=>mean)\n\nplt = Plot(\n    config=(xaxis=(ticktextangle=π/2,),),\n    data=gdf,\n    encodings=(\n        x=(field=:Year,),\n        y=(field=:Horsepower_mean,),\n        color=(field=:Origin,),\n    ),\n    graphic = ∑() do row\n        S(:fill=>row.color)Circle(r=5,c=[row.x,row.y])\n    end\n)\ndraw(plt)","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"Note that in our graphic parameter we passed:","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"∑() do row\n    S(:fill=>row.color)Circle(r=5,c=[row.x,row.y])\nend","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"This is how we write that summation notation for the graphic expression. In the case above, the sum ∑() is doing the job of sum^+_textiterate by row.","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"Let us now show how to do the lineplot.","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"plt = Plot(\n    config=(xaxis=(ticktextangle=π/2,),),\n    data=gdf,\n    encodings=(\n        x=(field=:Year,),\n        y=(field=:Horsepower_mean,),\n        color=(field=:Origin,),\n    ),\n    graphic= ∑(i=:color) do rows\n        S(:stroke=>rows.color[1],:strokeWidth=>3)Line(rows.x,rows.y)\n    end\n)\ndraw(plt)","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"This time, we used the following graphic expression:","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"∑(i=:color) do rows\n    S(:stroke=>rows.color[1],:strokeWidth=>2)Line(rows.x,rows.y)\nend","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"Here, the ∑(i=:color) is how we define that the data must be grouped by :color. The i is to invoke the idea of indexing, in other words, this is a summation where we are indexing the data by the color value.","category":"page"},{"location":"tutorials/4_expressiveness/#2.-Exploring-Graphic-Expressions","page":"4 - Graphic Expressions","title":"2. Exploring Graphic Expressions","text":"","category":"section"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"Note that the graphic expressions for the scatter plot and the line plot can easily be modified to produce other plots. Consider, for example, that we wish to create a scatter plot with a mark Face. The specification is almost the same as the one for the scatter plot with circles:","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"plt = Plot(\n    title=\"MyPlot\",\n    data=df,\n    encodings=(\n        x = (field = :Horsepower,),\n        y = (field = :Displacement,),\n        color = (field = :Origin, colorscheme=:tableau_superfishel_stone),\n        smile = (field = :Cylinders, scale_range=(-1,1),),\n    ),\n    graphic = ∑() do row\n        T(row[:x],row[:y])U(5)Face(headstyle=S(:fill=>row[:color]),smile=row[:smile])\n    end\n)\n\n\ndraw(plt, height=400)","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"The graphic expression is very straightforward. We simply iterate over each row, drawing the face mark. Instead of passing the x and y positions to the mark, we are using a translation transformation. We also use the scaling U(5) in order to enlarge the mark.","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"∑() do row\n    T(row[:x],row[:y])U(5)Face(headstyle=S(:fill=>row[:color]),smile=row[:smile])\nend","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"For the encoding specification, the main difference is the smile variable.","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"smile = (field = :Cylinders, scale_range=(-1,1),),","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"In the specifcation above, we are encoding the data columns Cylinders and applying a linear scaling function where the cylinder values are mapped to values between -1 and 1.","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"plt = Plot(\n    config=(xaxis=(ticktextangle=π/2,),),\n    data=gdf,\n    encodings=(\n        x=(field=:Year,),\n        y=(field=:Horsepower_mean,),\n        color=(field=:Origin,),\n    ),\n    graphic= ∑(i=:color) do rows\n        S(:stroke=>rows.color[1],:strokeWidth=>2)Arrow(rows.x,rows.y,headsize=5,headstyle=S(:fill=>rows.color[1]))\n    end\n)\ndraw(plt)","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"gdf = combine(groupby(df,[:Year,:Origin]),:Horsepower=>mean,:Miles_per_Gallon=>mean)\n\ngdf = sort(gdf,:Year)\n\nplt = Plot(\n    title=\"MyPlot\",\n    config=(\n            xaxis=(ticktextangle=π/2,),\n            yaxis=(ticktextangle=0,ticktextanchor=:c),\n        ),\n    data = gdf,\n    encodings=(\n        x=(field=:Year,),\n        y=(field=:Horsepower_mean,),\n        color=(field=:Origin,),\n    ),\n    graphic = ∑(i=:color,orderby=:color,descend=true) do row\n        S(:strokeWidth=>5)Area(pts=row.x ⊗ row.y,color=row.color[1])\n    end\n)\n\ndraw(plt)","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"gdf = combine(groupby(df,[:Origin]),nrow,)\ngdf = rename(gdf, :nrow=>:Total_Cars);\n\nplt = Plot(\n    data=gdf,\n    encodings=(\n        x=(field=:Origin,),\n        y=(field=:Total_Cars,),\n        text=(field=:Total_Cars,scale=IdScale()),\n    ),\n    graphic= ∑() do row\n        bar = S(:fill=>:steelblue)*Bar(h=row[:y],c=[row[:x],0],w=40)\n        text= TextMark(text=row[:text])\n        return bar ↑ (T(row[:x],5),text)\n    end\n)\ndraw(plt)","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"As we have stated, a graphic expression has a coalgebra (how to iterate over the data), an expression (how to turn sections of the data into diagrams) and an algebra (how to combine diagrams). In our previous example, both graphic expressions use the + operator as the algebra. Yet, different operations could be used, such as stacking. For example:","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"sum^uparrow_textiterate by row Circle(r=rowsize)","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"is equal to","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"Circle(r=data1size) uparrow Circle(r=data2size)  uparrow  uparrow Circle(r=dataNsize)","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"Moreover, we can compose graphic expressions in order to perform a nested iteration. For example,","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"sum^alg = +_i=textxsum^alg=uparrow_j=textcolor expr","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"In this graphic expression, we first group the data by values of :x, then each group if further grouped by values of :color. Think of this as nested for-loops.","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"The example we just gave is actually how we can construct stacked bar plots. Note:","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"gdf = combine(groupby(df,[:Origin, :Cylinders]),:Miles_per_Gallon=>mean,:Horsepower=>mean);\nplt = Plot(\n    data=gdf,\n    encodings=(\n        x=(field=:Cylinders,),\n        y=(field=:Miles_per_Gallon_mean,guide=(lim = (0,100),)),\n        color=(field=:Origin,datatype=:n),\n    ),\n    graphic =\n        ∑(i=:x,op=+,\n            ∑(i=:color,op=↑,orderby=:color, descend=false,\n                ∑() do row\n                    S(:fill=>row[:color])Bar(h=row[:y],c=[row[:x],0], w = 40) \n                end\n            )\n        )\n    )\ndraw(plt, height=400)","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"The process of drawing the stacked bars can be described as follows:","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"Group data by values of x\n    Group data by values of color\n        Iterate over each row drawing bar\n    Stack bars vertically\nSum the stacked bars","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"This process of grouping and combining is exactly what the graphic expression is doing.","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"∑(i=:x,op=+,\n    ∑(i=:color,op=↑,orderby=:color, descend=false,\n        ∑() do row\n            S(:fill=>row[:color])Bar(h=row[:y],c=[row[:x],0], w = 40) \n        end\n    )\n)","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"Here is where things start to get interesting. Suppose now we want to add a text with the value of each bar as a label. We can simply increment the previous graphic expression with a","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"gdf = combine(groupby(df,[:Origin, :Cylinders]),:Miles_per_Gallon=>mean,:Horsepower=>mean);\nplt = Plot(\n    data=gdf,\n    encodings=(\n        x=(field=:Cylinders,),\n        y=(field=:Miles_per_Gallon_mean,guide=(lim = (0,100),)),\n        color=(field=:Origin,datatype=:n),\n        text=(field=:Miles_per_Gallon_mean, scale=x->x)\n    ),\n    graphic =\n        ∑(i=:x,op=+,\n            ∑(i=:color,op=↑,orderby=:color, descend=false,\n                ∑() do row\n                    S(:fill=>row[:color])Bar(h=row[:y],c=[row[:x],0], w = 40) +\n                    S(:fill=>:white)TextMark(text=round(row[:text],digits=1), pos=[row[:x],row[:y]/2], fontsize=7)\n                end\n            )\n        )\n    )\ndraw(plt, height=400)","category":"page"},{"location":"tutorials/4_expressiveness/","page":"4 - Graphic Expressions","title":"4 - Graphic Expressions","text":"gdf = combine(groupby(df,[:Origin, :Cylinders]),:Miles_per_Gallon=>mean,:Horsepower=>mean);\nplt = Plot(\n    data=gdf,\n    encodings=(\n        x=(field=:Cylinders,),\n        y=(field=:Miles_per_Gallon_mean,guide=(lim = (0,100),)),\n        color=(field=:Origin,datatype=:n),\n        text=(field=:Miles_per_Gallon_mean, scale=IdScale()),\n        w=(field=:Horsepower_mean,scale_domain=(75,160),scale_range=(20,50),legend=(fmark=x->Bar(h=1,w=x),)),\n        textw=(field=:Horsepower_mean, scale=IdScale()),\n    ),\n    graphic =\n        ∑(i=:x,op=+,\n            ∑(i=:color,op=↑,orderby=:color, descend=false,\n                ∑() do row\n                    S(:fill=>row[:color])Bar(h=row[:y],c=[row[:x],0], w = row[:w]) +\n                    S(:fill=>:white)TextMark(text=round(row[:text],digits=1), pos=[row[:x]+row[:w]/2-2,row[:y]/2], fontsize=5, angle=π/2,anchor=:s)+\n                    S(:fill=>:white)TextMark(text=round(row[:textw],digits=1), pos=[row[:x],2], fontsize=5,anchor=:s)\n                end\n            )\n        )\n    )\ndraw(plt, height=400)","category":"page"},{"location":"tutorials/1_basics/#Basics-of-Diagram-Drawing","page":"1 - Diagramming Basics","title":"Basics of Diagram Drawing","text":"","category":"section"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"In this tutorial, we show how Vizagrams can be used to produce diagrams. We start from a simple example, and gradually present more complex examples.","category":"page"},{"location":"tutorials/1_basics/#1.-Drawing-a-simple-diagram","page":"1 - Diagramming Basics","title":"1. Drawing a simple diagram","text":"","category":"section"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"The basic building blocks for any diagram are graphical marks and graphical transformations. We can think of graphical marks as graphical objects that can be drawn in the screen, while the graphical transformations are actions such as translations, rotations, change of color, and so on. Vizagrams provides some ready to use marks, but users can define their own marks, yet, we leave this topic to another tutorial.","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"Let us start with a very simple example:","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"using Vizagrams\n# My first Diagram\nd = Circle()\n\ndraw(d)","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"In the code above, we simply define a diagram d as containing a Circle. Note that this circle has a default radius of 1 and center [0,0]. By calling draw(d), we turn the diagram d into an SVG file, which can then be rendered by the browser. Note that the draw also scales the drawing to fit an specific height. In this case, the default height is 500. We can pass another height in order to get either a smaller or larger diagram, or we can use a pad to apply some padding to the output SVG.","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"d = Circle()\ndraw(d,height=100, pad=20)","category":"page"},{"location":"tutorials/1_basics/#2.-Applying-Transformations","page":"1 - Diagramming Basics","title":"2. Applying Transformations","text":"","category":"section"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"Graphical transformations can be either geometric or aesthetic. The geometric transformations are translations (T(x,y)), rotations (R(θ)), uniform scaling (U(s)) and reflection (M(p)). For aesthetic (stylistic) transformations, we use S(attr), where attr is something like :fill=>:red, which will apply the fill color of red.","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"The way we apply transformations follows a mathematical notation. We use * to represent the action of applying a transformation to a mark. Moreover, we can compose transformations also using * or by simply stacking transformations side by side. Let us do some examples to clarify.","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"d = Square()\ndraw(d,height=100)","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"d = R(π/4)*Square()\ndraw(d,height=100)","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"d = S(:fill=>:red,:stroke=>:blue,:strokeWidth=>2)*Square()\ndraw(d,height=100)","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"d = S(:fill=>:red,:stroke=>:blue,:strokeWidth=>2)R(π/4)*Square()\ndraw(d,height=100)","category":"page"},{"location":"tutorials/1_basics/#3.-Combining-Marks-for-more-complex-Diagrams","page":"1 - Diagramming Basics","title":"3. Combining Marks for more complex Diagrams","text":"","category":"section"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"A diagram with a single graphical mark is not very interesting. We can construct more complex diagrams by \"adding\" marks together. The process of adding marks is akin to drawing a mark one on top of the other, similar to how in an SVG file we write the tag for a different geometry one after another.","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"d = S(:fill=>:blue)Circle() + S(:fill=>:red)RegularPolygon(n=3) +S(:fill=>:green)Square() \ndraw(d,height=100)","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"We now have the tools to create very complex diagrams, it is just a matter of adding marks and applying transformations.","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"d = T(3,0)Circle() + T(0,2)RegularPolygon(n=3) +R(π/10)U(2)Square() \ndraw(d,height=100)","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"Note also that our * operator is distributive, hence, we can apply the same transformations to several marks at once.","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"d = S(:fill=>:blue)*(T(3,0)Circle() + T(0,2)RegularPolygon(n=3) +R(π/10)U(2)Square()) + T(2,-2)S(:stroke=>:red,:strokeWidth=>5)Line([[0,0],[3,0],[3,3]])\ndraw(d,height=100)","category":"page"},{"location":"tutorials/1_basics/#4.-Combining-Diagrams","page":"1 - Diagramming Basics","title":"4. Combining Diagrams","text":"","category":"section"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"We can combine marks and apply transformations. Similarly, we can combine previously created diagrams to create new diagrams.","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"d1 = Circle() + T(2,0)*Circle()\nd2 = S(:fill=>:blue)*(T(3,0)Circle() + T(0,2)RegularPolygon(n=3) +R(π/10)U(2)Square())\nd  = d1 + T(5,0)R(π/5)*d2\n\ndraw(d,height=100)","category":"page"},{"location":"tutorials/1_basics/#5.-Stacking-Diagrams","page":"1 - Diagramming Basics","title":"5. Stacking Diagrams","text":"","category":"section"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"The basic geometric transformations translations, rotations and scaling. Yet, Vizagrams provides some stacking transformations to ease the process of diagram drawing. The process of stacking consists in placing two marks one right next to the other given a certain direction. This is done by computing the envelope (similar to bounding box) of each mark, and then translating the marks accordingly.","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"d = Circle() → Circle() ↑ Square()\n\ndraw(d,height=100)","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"We can add some spacing between the stacking by passing a tuple containing the mark and a translation transformation.","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"d = Circle() → (T(0.5,0),Circle() → (T(0.5,0),Circle()))\n\ndraw(d,height=100)","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"One has to pay attention to the parenthesis, as the order matters. Yet, we can use mapping functions to reduce the clutter. For example, let us stack several circles side by side with a 0.5 spacing.","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"d = mapreduce(c->Circle(), (x,y)-> x → (T(0.5,0),y), 1:5)\ndraw(d,height=100)","category":"page"},{"location":"tutorials/1_basics/#6.-Text-and-LaTeX","page":"1 - Diagramming Basics","title":"6. Text and LaTeX","text":"","category":"section"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"Text is also a mark. Hence, we can apply geometric and aesthetic transformations.","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"d = S(:fontFamily=>\"Futura\")TextMark(text=\"My Text\",anchor=:c,fontsize=1)\n\ndraw(d,height=100)","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"Let is alter the anchor values to show how it behaves. We draw a cross around the center of the canvas, in order to make clear how the text moves.","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"cross = Line([[-3,0],[3,0]]) + R(π/2)Line([[-3,0],[3,0]]) \n\nanchors = [:c, :s, :n, :e, :w, :se, :sw, :ne, :nw]\nd = mapreduce(a ->cross + TextMark(text=uppercase(\"$a\"),anchor=a,fontsize=1),\n    (x,y)-> x → (T(0.5,0),y),anchors)\n\ndraw(d,height=80)","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"Vizagrams also provides the possibility of writing LaTeX. For this, the user must import LaTeXStrings:","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"using LaTeXStrings\nd = S(:fill=>:blue)*\n    TextMark(text=L\"e^x = \\sum^\\infty_{i=0}\\frac{x^n}{n!} = 1 + x + \\frac{x^2}{2} + \\cdots\")\ndraw(d,height=100)","category":"page"},{"location":"tutorials/1_basics/#6.-A-Final-Example","page":"1 - Diagramming Basics","title":"6. A Final Example","text":"","category":"section"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"We end this tutorial with a fractal diagram.","category":"page"},{"location":"tutorials/1_basics/","page":"1 - Diagramming Basics","title":"1 - Diagramming Basics","text":"function sierpinski(n)\n    if n == 0\n        return Polygon([(1,0), (0,0), (1/2, 1)])\n    else\n        t = sierpinski(n - 1)\n        return U(0.5) * (T(-1/2,0)t + T(0,1)t + T(1/2,0)t)\n    end\nend\n\nd = sierpinski(5)\ndraw(d)","category":"page"},{"location":"tutorials/5_customization/#Customizing-Visualizations","page":"5 - Customizing Visualizations","title":"Customizing Visualizations","text":"","category":"section"},{"location":"tutorials/5_customization/","page":"5 - Customizing Visualizations","title":"5 - Customizing Visualizations","text":"Before we go into more details on how to construct complex visualizations, let us explain how one can customize the plots generated by Vizagrams specification.","category":"page"},{"location":"tutorials/5_customization/","page":"5 - Customizing Visualizations","title":"5 - Customizing Visualizations","text":"using Vizagrams\nusing DataFrames\nusing Statistics\nusing Random\nusing VegaDatasets\ndf = DataFrame(dataset(\"cars\"));\n\n# We need to drop missing values, as Vizagrams does not handle them yet.\ndf = dropmissing(df);\n\nnothing #hide","category":"page"},{"location":"tutorials/5_customization/","page":"5 - Customizing Visualizations","title":"5 - Customizing Visualizations","text":"When creating a plot in Vizagrams, many defaults are guessed in order to make the specification less verbose. Yet, if one wishes, it is possible to alter such deafults in order to produce custom visuals.","category":"page"},{"location":"tutorials/5_customization/#1.-Legends","page":"5 - Customizing Visualizations","title":"1. Legends","text":"","category":"section"},{"location":"tutorials/5_customization/","page":"5 - Customizing Visualizations","title":"5 - Customizing Visualizations","text":"When visualizations become more complex, so does their legends. Consider, for example, the scatter plot with faces as marks.","category":"page"},{"location":"tutorials/5_customization/","page":"5 - Customizing Visualizations","title":"5 - Customizing Visualizations","text":"plt = Plot(\n    title=\"MyPlot\",\n    data=df,\n    encodings=(\n        x = (field = :Horsepower,),\n        y = (field = :Displacement,),\n        color = (field = :Origin, colorscheme=:tableau_superfishel_stone),\n        smile = (field = :Cylinders, scale_range=(-1,1), legend=(fmark=x->Face(size=7,smile=x),)),\n    ),\n    graphic = ∑() do row\n        T(row[:x],row[:y])U(5)Face(headstyle=S(:fill=>row[:color]),smile=row[:smile])\n    end\n)\n\n\ndraw(plt, height=400)","category":"page"},{"location":"tutorials/5_customization/","page":"5 - Customizing Visualizations","title":"5 - Customizing Visualizations","text":"When a user defines a new encoder, such as smile, by default, no legend will be drawn. If the user wants a legend, it is possible to specify an fmark function, which takes the values encoded and draws a mark. Another option is for users to draw the legends as a separate diagram, and incorporate it into the plot.","category":"page"},{"location":"tutorials/5_customization/","page":"5 - Customizing Visualizations","title":"5 - Customizing Visualizations","text":"In the example above, we have used the fmark option. Let us now create a new customized legend.","category":"page"},{"location":"tutorials/5_customization/","page":"5 - Customizing Visualizations","title":"5 - Customizing Visualizations","text":"plt = Plot(\n    title=\"MyPlot\",\n    data=df,\n    encodings=(\n        x = (field = :Horsepower,),\n        y = (field = :Displacement,),\n        color = (field = :Origin, colorscheme=:tableau_superfishel_stone),\n        smile = (field = :Cylinders, scale_range=(-1,1)),\n    ),\n    graphic = ∑() do row\n        T(row[:x],row[:y])U(5)Face(headstyle=S(:fill=>row[:color]),smile=row[:smile])\n    end\n)\n\n\nlegend_title = S(:fontWeight => \"bold\")TextMark(fontfamily=\"Helvetica\",text=\"Smile\",fontsize=8) \nlegend_marks = \n        Face(smile=-1) ↓\n        (T(0,-0.4),TextMark(text=\"Cylinders = 3\",fontsize=0.6)) →\n        (T(2,0),TextMark(text=\"...\",fontsize=1)) →\n        (T(2,0),Face(smile=1) ↓\n        (T(0,-0.4),TextMark(text=\"Cylinders = 3\",fontsize=0.6)))\nlegend = legend_title ↓ (T(0,-10),U(8)legend_marks)\n\ndraw(plt + T(plt.figsize[1]+30,130)legend, height=400)","category":"page"},{"location":"tutorials/5_customization/#2.-Frames-and-Axes","page":"5 - Customizing Visualizations","title":"2. Frames and Axes","text":"","category":"section"},{"location":"tutorials/5_customization/","page":"5 - Customizing Visualizations","title":"5 - Customizing Visualizations","text":"Using the config in the graphic specification, users can thoroughly customize the frame and axes of plots.","category":"page"},{"location":"tutorials/5_customization/","page":"5 - Customizing Visualizations","title":"5 - Customizing Visualizations","text":"gdf = combine(groupby(df,[:Year,:Origin]),:Horsepower=>mean,:Miles_per_Gallon=>mean,:Cylinders=>median)\n\ngdf = sort(gdf,:Year)\n\nplt = Plot(\n    config=(\n            frame_style=S(:stroke=>:white),\n            xaxis=(\n                    title=\"years\",\n                    titlefontsize=8,\n                    ticktextangle=π/2,\n                    ticktexts=collect(1970:1982),\n                    axisarrow=S(:stroke=>:red,:fill=>:red)Arrow(pts=[[0,0],[300,0]],headsize=5),\n                    grid=(style=S(:strokeWidth=>30,:strokeOpacity=>0.05),),\n            ),\n            yaxis=(\n                    titlemark=TextMark(text=\"Mean Horsepower\",fontsize=7,style= S(:fontWeight=>:bold)),\n                    titleangle=-π/2,\n                    ticktextangle=0,\n                    ticktextanchor=:c,\n                    tickmark=Square(l=6),\n                    grid=(flag=false,),\n            ),\n        ),\n    data = gdf,\n    encodings=(\n        x=(field=:Year,),\n        y=(field=:Horsepower_mean,),\n        color=(field=:Origin,),\n        size = (field = :Cylinders_median,),\n    ),\n    graphic = S(:opacity=>0.5,:stroke=>:black)Circle()\n)\n\ndraw(plt,height=400,pad=30)","category":"page"},{"location":"tutorials/5_customization/#3.-Titles","page":"5 - Customizing Visualizations","title":"3. Titles","text":"","category":"section"},{"location":"tutorials/5_customization/","page":"5 - Customizing Visualizations","title":"5 - Customizing Visualizations","text":"At last, we have the title of a plot. The simplest way to customize a title is to omit is from the graphic specification, and instead join it to the plot using the diagram opeartions.","category":"page"},{"location":"tutorials/5_customization/","page":"5 - Customizing Visualizations","title":"5 - Customizing Visualizations","text":"plt = Plot(\n    data=df,\n    encodings=(\n        x = (field = :Horsepower,),\n        y = (field = :Displacement,),\n        size = (field = :Cylinders,),\n    ),\n    graphic = S(:fill=>:steelblue,:opacity=>0.2,:stroke=>:black)Circle()\n)\n\nmaintitle = S(:fontWeight=>:bold)TextMark(text=\"Main Title\", anchor=:e,fontfamily=\"monospace\")\nsubtitle = S(:fontStyle=>:italic)TextMark(text=\"Subtitle\", anchor=:e, fontsize=8,fontfamily=\"monospace\")\n\ntitle = maintitle ↓ (T(0,-5),subtitle)\n\nd = plt ↑ title\n\ndraw(d, height=400)","category":"page"},{"location":"tutorials/6_polar/#Polar-Visualizations","page":"7 - Polar Visualizations","title":"Polar Visualizations","text":"","category":"section"},{"location":"tutorials/6_polar/","page":"7 - Polar Visualizations","title":"7 - Polar Visualizations","text":"At the moment, all our plots have used the typical Cartesian coordinates. In this tutorial, we explore data visualizations that use the polar coordinate system.","category":"page"},{"location":"tutorials/6_polar/#1.-Pizza-Plot","page":"7 - Polar Visualizations","title":"1. Pizza Plot","text":"","category":"section"},{"location":"tutorials/6_polar/","page":"7 - Polar Visualizations","title":"7 - Polar Visualizations","text":"Let us start with the very common pizza plot (pie chart). To construct such plot, we must map a data column to angles. Moreover, we need to compute the cumulative angle, in order to rotate the slices by the right amount. Note that this plot does not have any coordinate axes, as we don't use x and y when specifying the pizza.","category":"page"},{"location":"tutorials/6_polar/","page":"7 - Polar Visualizations","title":"7 - Polar Visualizations","text":"The quick way of producing this plot is by using the preset mark Pizza:","category":"page"},{"location":"tutorials/6_polar/","page":"7 - Polar Visualizations","title":"7 - Polar Visualizations","text":"using Vizagrams\nusing DataFrames\nusing Random\n\nRandom.seed!(4)\ndf = DataFrame(x=[1, 2, 3, 5, 1, 2], y=[10, 10, 20, 10, 20, 30], c=[\"a\", \"b\", \"a\", \"a\", \"b\", \"a\"],d=rand([0,1],6),e=rand([1,2,3],6),\n    k=[\"key1\",\"key2\",\"key3\",\"key4\",\"key5\",\"key6\"]\n)\n\nplt = Plot(\n    figsize=(300,250),\n    data=df,\n    encodings=(\n        color=(field=:k,datatype=:n),\n        angle = (field = :x, datatype=:q, scale_domain=(0,sum(df.x)), scale_range=(0,2π)),\n        r = (field=:y, scale_range=(80,120))\n    ),\n    graphic = Pizza()\n)\n\ndraw(plt)","category":"page"},{"location":"tutorials/6_polar/","page":"7 - Polar Visualizations","title":"7 - Polar Visualizations","text":"Note that we must adjust the scale for the angle so that the domain goes from 0 to the sum of values of x and ranging from 0 to 2π. We must also adjust the scale for the radius variable r, so that our pizza is large enough compared to the figsize.","category":"page"},{"location":"tutorials/6_polar/","page":"7 - Polar Visualizations","title":"7 - Polar Visualizations","text":"We can replicate the pizza plot using Slice marks instead. This makes the construction process more explicit and allows us to more easily create new types of visualizations.","category":"page"},{"location":"tutorials/6_polar/","page":"7 - Polar Visualizations","title":"7 - Polar Visualizations","text":"plt = Plot(\n    figsize=(300,250),\n    data=df,\n    encodings=(\n        color=(field=:k,datatype=:n),\n        angle = (field = :x, datatype=:q, scale_domain=(0,sum(df.x)), scale_range=(0,2π)),\n        r = (field=:y, scale_range=(80,120)),\n    ),\n    graphic = data -> begin\n        acc = cumsum(vcat(0,getscale(plt,:angle)(df.x)[begin:end-1]))\n        data = hconcat(data,acc=acc)\n        ∑() do row\n            S(:fill=>row.color)Slice(rmajor=row.r,ang=row.angle,θ=row.acc,rminor=20)\n        end(data)\n    end\n)\n\ndraw(plt)","category":"page"},{"location":"tutorials/6_polar/","page":"7 - Polar Visualizations","title":"7 - Polar Visualizations","text":"Let us explain the graphic expression:","category":"page"},{"location":"tutorials/6_polar/","page":"7 - Polar Visualizations","title":"7 - Polar Visualizations","text":"graphic = data -> begin\n    acc = cumsum(vcat(0,getscale(plt,:angle)(df.x)[begin:end-1]))\n    acc = StructArray(acc=acc)\n    data = hconcat(data,acc)\n    ∑() do row\n        S(:fill=>row.color)Slice(rmajor=row.r,ang=row.angle,θ=row.acc,rminor=20)\n    end(data)\nend","category":"page"},{"location":"tutorials/6_polar/","page":"7 - Polar Visualizations","title":"7 - Polar Visualizations","text":"The main hurdle to specify the pizza plot is to compute the cumulative angle. This must be done over the whole dataset, before we draw each slice. To do this, we simply start our graphic expression with data -> .... Then, we compute the cumulative angle, and append it to the data. We then can simply loop over each row drawing the slices.","category":"page"},{"location":"tutorials/6_polar/","page":"7 - Polar Visualizations","title":"7 - Polar Visualizations","text":"The advantage of such approach is that we can now easily add labels. We add a new variable text to our specification, compute the the x and y positions for the labels, and add the TextMark.","category":"page"},{"location":"tutorials/6_polar/","page":"7 - Polar Visualizations","title":"7 - Polar Visualizations","text":"plt = Plot(\n    figsize=(300,250),\n    data=df,\n    encodings=(\n        color=(field=:k,datatype=:n),\n        angle = (field = :x, datatype=:q, scale_domain=(0,sum(df.x)), scale_range=(0,2π)),\n        r = (field=:y, scale_range=(80,120)),\n        text = (field=:y, scale=IdScale()),\n    ),\n    graphic = data -> begin\n        acc = cumsum(vcat(0,getscale(plt,:angle)(df.x)[begin:end-1]))\n        data = hconcat(data,acc=acc)\n        ∑() do row\n            r = row.r + 15\n            x = r*cos(row.acc-π/2+row.angle/2)\n            y = r*sin(row.acc-π/2+row.angle/2)\n            S(:fill=>row.color,:stroke=>:white)Slice(rmajor=row.r,ang=row.angle,θ=row.acc,rminor=20) +\n            S(:fill=>row.color)T(x,y)TextMark(text=row.text,fontsize=8)\n        end(data)\n    end\n)\n\ndraw(plt)","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Vizagrams","category":"page"},{"location":"#Vizagrams","page":"Home","title":"Vizagrams","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Vizagrams is a visualization framework that integrates diagramming and data visualization, with the goal of providing high expressiveness with intuitive usability.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The framework implements a diagramming DSL together with a visualization grammar, thus allowing users to  create diagrams by combining and transforming plots, as well as create new visualization specifications using diagram construction operations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Why-another-visualization-package?","page":"Home","title":"Why another visualization package?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The moto for Vizagrams is \"high expressiveness with intuitive usability\". In other words, the goal is for users to be able to produce (complex) visualizations without having to become power-users or resorting to ad-hoc methods, where the complexity is hidden by several lines of code. To achieve this, Vizagrams uses a novel approach to data visualization construction, which integrates graphic specification and diagramming.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The framework implements a diagramming DSL, and builds a visualization grammar on top of it. The idea of constructing data visualization tools on top of diagramming frameworks is not new[1]. What makes Vizagrams distinct is how it uses the concepts of graphical marks and graphic expressions[2] to blur the distinction between data visualization and diagramming. This allows users to produce plots and manipulate them using diagramming operations such as composition, translation, rotation, style transformations, and so on.","category":"page"},{"location":"","page":"Home","title":"Home","text":"One of the core assumptions of Vizagrams is that once users understand the basics of the framework, the task of creating new visualizations becomes similar to diagramming, hence the \"intuitive usability\". In terms of \"expressiveness\", we let the gallery of examples speak for itself.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here is a summary of the features provided by Vizagrams:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Diagramming DSL inspired by the Haskell library Diagrams;\nVisualization grammar with syntax similar to Vega-Lite;\nAbility to define custom graphical marks;\nUse graphic expressions to create new data visualization specifications;\nManipulate and combine plots using diagramming operations;","category":"page"},{"location":"#Quickstart","page":"Home","title":"Quickstart","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Let us do some simple examples to illustrate how to use Vizagrams. We start with a simple diagram:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Vizagrams\n\nd = Circle() + T(2,0)*Square()\ndraw(d)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that + represents composition, and T(2,0) is translation. Besides translations, we have rotation (R(ang)), uniform scaling (U(x)) and stylistic transformations (S(...)). Let us increment our previous diagram:","category":"page"},{"location":"","page":"Home","title":"Home","text":"d = S(:fill=>:white,:stroke=>:black)*Circle(r=2) + d\ndraw(d)","category":"page"},{"location":"","page":"Home","title":"Home","text":"For plotting, we use the visualization grammar syntax. If you know used VegaLite.jl, this might look familiar:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using DataFrames\nusing VegaDatasets\ndf = DataFrame(dataset(\"cars\"));\ndf = dropmissing(df);\n\nplt = Plot(\n    data=df,\n    encodings=(\n        x=(field=:Horsepower,),\n        y=(field=:Miles_per_Gallon,),\n        color=(field=:Origin,)\n    ),\n    graphic=Circle(r=5)\n)\ndraw(plt)","category":"page"},{"location":"","page":"Home","title":"Home","text":"We can use our diagram d as a mark for a new plot:","category":"page"},{"location":"","page":"Home","title":"Home","text":"new_plt = Plot(\n    data=df,\n    encodings=(\n        x=(field=:Horsepower,),\n        y=(field=:Miles_per_Gallon,),\n        color=(field=:Origin,),\n        size=(field=:Acceleration,),\n    ),\n    graphic = Mark(d)\n)\n\ndraw(new_plt)","category":"page"},{"location":"","page":"Home","title":"Home","text":"And we can manipulate our plots and add new diagram elements in order to produce a new visualization:","category":"page"},{"location":"","page":"Home","title":"Home","text":"viz_title = TextMark(text=\"Creating a New Viz\",anchor=:c,fontsize=20)\nviz_frame = S(:fillOpacity=>0,:stroke=>:black)T(400,100)*Rectangle(h=370,w=1000)\n\nnew_viz = new_plt + T(470,0)plt + viz_frame + T(400,250)*viz_title \n\ndraw(new_viz)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Check the documentation for a more thorough exposition.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install Vizgrams.jl, run the following command in the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia>]\npkg> add Vizagrams","category":"page"},{"location":"#Related-Packages-in-the-Julia-Ecosystem","page":"Home","title":"Related Packages in the Julia Ecosystem","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Compose.jl - A vector graphics library for Julia, that can be used for diagram drawing. Similar to Vizagrams, it is also inspired by the Haskell library Diagrams.\nGadfly.jl - A data visualization package based largely on Hadley Wickhams's ggplot2. It has been developed for many years, thus, it is a good choice for those who want a robust data visualization package with a visualization grammar implementation.\nLuxor.jl - Package for drawing simple static 2D vector graphics. The focus of Luxor is on simplicity and ease of use.\nMakie.jl - Implements an interactive plotting ecosystem. Similar to Python's Matplotlib, it does not implement a visualization grammar, instead, users can pick from a collection of charts and arrange them using layouts and other customization options.\nPlots.jl - A visualization interface and toolset. It does not implement a visualization grammar, instead relying on the concept of plot attributes as the building block of plot specifications.\nVegaLite.jl - Plotting package based on Vega-Lite, which is a high-level grammar of interactive graphics.","category":"page"},{"location":"#Citing","page":"Home","title":"Citing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"@misc{Vizagrams.jl,\n    author = {Davi Sales Barreira, Asla Medeiros e Sá, Flávio Codeço Coelho},\n    title = {Vizagrams.jl},\n    url = {https://github.com/davibarreira/Vizagrams.jl},\n    version = {v0.1.0},\n    year = {2024},\n    month = {7},\n}","category":"page"},{"location":"#Next-Steps","page":"Home","title":"Next Steps","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you are instereted in learning more about Vizagrams, go through the Tutorials secion in the documentation, where we go step-by-step from the basics of diagramming, to more complex visualizations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"[1]: For example, Gadfly.jl is built on top of Compose.jl and the R pacakge ggplot2 is built on top of grid.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[2]: Check the documentation for an explanation on graphical marks and graphic expressions.","category":"page"},{"location":"gallery/minard/#Minard's-Chart","page":"Minard's Chart","title":"Minard's Chart","text":"","category":"section"},{"location":"gallery/minard/","page":"Minard's Chart","title":"Minard's Chart","text":"In this example, we reproduce Minard’s depiction of Napoleon’s march on Russia. The visualization can be broken down in two subplots. The first contains a trail plot with the number of troops marching, and the second is the temperature variation.","category":"page"},{"location":"gallery/minard/","page":"Minard's Chart","title":"Minard's Chart","text":"First, we create the marching plot, and then draw the text labels over the plot.","category":"page"},{"location":"gallery/minard/","page":"Minard's Chart","title":"Minard's Chart","text":"using Vizagrams\n\n# Importing the dataset\nusing RDatasets\ntroops = RDatasets.dataset(\"HistData\", \"Minard.troops\")\ntemp = RDatasets.dataset(\"HistData\", \"Minard.temp\")\ncities = RDatasets.dataset(\"HistData\", \"Minard.cities\");\n\n\n# Create the Plot\nplt = Plot(\n    title=\"Minard\",\n    config=(\n        xaxis=(\n            title=\"\",\n            tickmark=NilD(),\n            ticktexts=\"\"),\n    ),\n    figsize=(1000,300),\n    data=troops,\n    encodings=(\n        x = (field = :Long,),\n        y = (field = :Lat,guide=(lim=(53.8,56),)),\n        color = (field = :Direction, datatype=:n, colorscheme=[\"#bd9e39\",:gray]),\n        detail = (field = :Group, datatype=:n),\n        size = (field=:Survivors, scale_range=(1,10)),\n    ),\n    graphic = ∑(i=:detail,∑(i=:color) do row\n        S(:fill=>row.color[1])Trail(pts=row.x ⊗ row.y,ws=row.size)\n    end)\n)\n\n# Add Text Label for the Cities\ncities_graphic = ∑() do row\n    T(plt(row,:Long,:x),plt(row,:Lat,:y))*TextMark(text=row.City)\nend(cities);\n\ndraw(plt + cities_graphic, height=nothing, width=800)","category":"page"},{"location":"gallery/minard/","page":"Minard's Chart","title":"Minard's Chart","text":"Next, we produce the temperature plot.","category":"page"},{"location":"gallery/minard/","page":"Minard's Chart","title":"Minard's Chart","text":"plt_temp = Plot(\n    figsize=(1000,100),\n    config = (\n        xaxis=(title=\"Logitude\",grid=(flag=true,)),\n        yaxis=(title=\"Temperature\",grid=(flag=false,))),\n    data=temp,\n    encodings=(\n        x = (field = :Long,scale = getscale(plt,:x)),\n        y = (field = :Temp,),\n    ),\n    graphic = S(:stroke=>:black)Line() + S(:fill=>:black, :opacity=>1)Square(l=10)\n)\n\ndraw(plt_temp, height=nothing, width=800)","category":"page"},{"location":"gallery/minard/","page":"Minard's Chart","title":"Minard's Chart","text":"Finally, the full visualization.","category":"page"},{"location":"gallery/minard/","page":"Minard's Chart","title":"Minard's Chart","text":"draw((plt + cities_graphic) ↓ plt_temp, height=nothing, width=800)","category":"page"},{"location":"tutorials/3_datavisualization/#Basics-of-Data-Visualization","page":"3 - Data Vizualization Basics","title":"Basics of Data Visualization","text":"","category":"section"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"Vizagrams is more than a diagram drawing package, it is also a tool for data visualization. The main idea is to integrate diagramming with data visualization, hence increasing the kind of visualizations we can express. This integration is made possible mainly due to the way we coded graphical marks.","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"The way Vizagrams defines graphical marks allows us to create marks such as axes, grids, legends, and so on, which help us assemble a plot. All this elements are used by a more general mark called Plot. The parameters used to create an instance of Plot is what we call a graphic specification.","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"Vizagrams is a visualization grammar in the sense that it provides a graphic specification. Moreover, the specification follows the specification style of Vega-Lite, with some slight modifications. If you know Vega-Lite, the way Vizagrams defines plots will be very familiar to you. Yet, for those that are not used to visualization grammars, Vizagrams also provides some quick functions to produce plots.","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"using Vizagrams\nusing DataFrames\nusing Statistics\nusing Random","category":"page"},{"location":"tutorials/3_datavisualization/#1.-First-Data-Visualization","page":"3 - Data Vizualization Basics","title":"1. First Data Visualization","text":"","category":"section"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"We start with a very simple example. We generate some random values, and then create a plot using the function, you guessed it, plot. This function is just a quick way to specify a plot without having to write the whole specification.","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"Random.seed!(4)\nplt = plot(x=rand(10),y=rand(10))\n# plt = S(:vectorEffect=>\"none\")plt\ndraw(plt,height=300)","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"And we have a plot. More interestingly, the plt object is a diagram, thus, we can manipulate and compose with other marks.","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"d1 = plt ↑ S(:fontWeight=>:bold)TextMark(text=\"This is my plot\",anchor=:e,fontsize=14)\nd2 = R(π/5) * (plt ↑ S(:fontWeight=>:bold)TextMark(text=\"This is my plot rotated\",anchor=:e,fontsize=14))\n\nd  = d1 → (T(50,0),d2)\ndraw(d)","category":"page"},{"location":"tutorials/3_datavisualization/#2.-Graphic-Specification","page":"3 - Data Vizualization Basics","title":"2. Graphic Specification","text":"","category":"section"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"For more control over a data visualization, one can use a graphic specification. A specification is a description of the plot, which contains information such as how to map the data to the visual variables, which type of graphical marks one must use, how to scale the data, and so on. As we have stated, Vizagrams follows the specification style from Vega-Lite.","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"First, let us import a dataframe to be visualized.","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"using VegaDatasets\ndf = DataFrame(dataset(\"cars\"));\n\n# We need to drop missing values, as Vizagrams does not handle them yet.\ndf = dropmissing(df);\nnothing # hide","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"plt = Plot(\n    data=df,\n    encodings=(\n        x=(field=:Horsepower,),\n        y=(field=:Miles_per_Gallon,),\n        color=(field=:Origin,)\n    ),\n    graphic=Circle(r=5)\n)\ndraw(plt)","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"Note that in the example above, Vizagrams tries to infer the proper scaling and axes for the given plot based on the underlying data. For example, Vizgrams is guessing that both :Horsepower and :MilesperGallon are quantitative data, while :Origin is nominal.","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"Users can provide more parameters to the graphic specifcation in order to get a graphic closer to ones preferences. For example, besides data, encoding and graphic, one can use parameters such as title, figsize and config.","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"Below we increment the previous plot with more parameters.","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"p = Plot(\n    title=\"Plot\",\n    figsize=(500,300),\n    config=(\n        xgrid=(flag=true,),\n        ygrid=(flag=true,)\n        ),\n    data=df,\n    encodings=(\n        x=(field=:Horsepower,datatype=:q),\n        y=(field=:Miles_per_Gallon,),\n        color=(field=:Acceleration,colorscheme=(:red,:blue)),\n        size = (field = :Cylinders,datatype=:o, scale_range=(1,3)),\n    ),\n    graphic=S(:stroke=>:black)Circle(r=3)\n)\n\ndraw(p, height=300)","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"Let us explore a bit of our specification:","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"p = Plot(\n    title=\"Plot\",\n    figsize=(300,300),\n    config=(\n        xgrid=(flag=true,),\n        ygrid=(flag=true,)\n        ),\n    data=df,\n    encodings=(\n        x=(field=:Horsepower,datatype=:q),\n        y=(field=:Miles_per_Gallon,),\n        color=(field=:Acceleration,colorscheme=(:red,:blue)),\n        size = (field = :Cylinders,datatype=:o, scale_range=(1,3)),\n    ),\n    graphic=S(:stroke=>:black)Circle(r=3)\n)","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"The main fields we have here are title,figsize,config,data, encodings, and graphic. - title is title above the plot; - figsize is pixel size for frame containing the graphic; - config is for extra attributes for manipulating aesthetic aspects of the plot, such as grids, axes style, and so on' - data is picking the dataset; - encodings is mapping the visual variables (positions x y, and color) to the data columns (x goes to Horsepower, y goes to MilesperGallon and color goes to Field); - graphic is defininig how to draw the graphic inside the plotting context.","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"All these parameters are somewhat the same as in Vega-Lite, with the exception of graphic.","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"In Vega-Lite and other visualization grammars (e.g. ggplot), instead of this field graphic we have a field mark or geom (stands for geometry). Their role is very similar to what we have called graphic in the sense that they describe the sort of \"graphical mark\" to be drawn in the plotting frame. Yet, as will be shown further, graphic contains what is called graphic expression, which are functions that map a set of data to a diagram.","category":"page"},{"location":"tutorials/3_datavisualization/#3.-More-Examples","page":"3 - Data Vizualization Basics","title":"3. More Examples","text":"","category":"section"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"We end this tutorial presenting some more examples. We do not dive into the extra capabilities of the graphic parameter.","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"gdf = combine(groupby(df,[:Year,:Origin]),:Horsepower=>mean,:Miles_per_Gallon=>mean)\n\nplt = Plot(\n    config=(xaxis=(ticktextangle=π/2,),),\n    data=gdf,\n    encodings=(\n        x=(field=:Year,),\n        y=(field=:Horsepower_mean,),\n        color=(field=:Origin,),\n    ),\n    graphic= S(:strokeWidth=>4)Line()\n)\ndraw(plt)","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"If we want to draw the points over the line, we can just add the circles.","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"plt = Plot(\n    config=(xaxis=(ticktextangle=π/2,),),\n    data=gdf,\n    encodings=(\n        x=(field=:Year,),\n        y=(field=:Horsepower_mean,),\n        color=(field=:Origin,),\n    ),\n    graphic= S(:strokeWidth=>4)Line() + S(:opacity=>1)Square(l=10)\n)\ndraw(plt)","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"Vizagrams also has default behavior for marks such as bars.","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"gdf = combine(groupby(df,[:Year,:Origin]),:Horsepower=>mean,:Miles_per_Gallon=>mean)\n\nplt = Plot(\n    config=(xaxis=(ticktextangle=π/2,),),\n    data=gdf,\n    encodings=(\n        x=(field=:Year,),\n        y=(field=:Horsepower_mean,),\n    ),\n    graphic= S(:fill=>:steelblue)Bar(w=20)\n)\ndraw(plt)","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"gdf = combine(groupby(df,[:Year,:Origin]),:Horsepower=>mean,:Miles_per_Gallon=>mean)\n\nplt = Plot(\n    config=(xaxis=(ticktextangle=π/2,),),\n    data=gdf,\n    encodings=(\n        x=(field=:Year,),\n        y=(field=:Horsepower_mean,guide=(lim=(0,400),)),\n        color=(field=:Origin,),\n    ),\n    graphic= S(:stroke=>:black)Bar(w=20)\n)\ndraw(plt)","category":"page"},{"location":"tutorials/3_datavisualization/","page":"3 - Data Vizualization Basics","title":"3 - Data Vizualization Basics","text":"disasters = DataFrame(dataset(\"disasters\"))\ndisasters = dropmissing(disasters);\ndisasters = filter(Cols(:Entity)=>x->x!=\"All natural disasters\", disasters);\n\nplt = Plot(\n    title=\"Disasters\",\n    config = (\n        xaxis=(grid=(flag=false,),),\n        yaxis=(grid=(flag=false,),),\n        ),\n    figsize=(500,400),\n    data=disasters,\n    encodings=(\n        x = (field = :Year, datatype = :q, guide=(lim=(1900,2017),)),\n        y = (field = :Entity,datatype=:n, guide=(tickvalues=unique(sort(disasters.Entity, rev=true)),)),\n        color = (field = :Entity,legend=(flag=false,)),\n        size = (field = :Deaths,datatype=:q, scale_domain =(0,maximum(disasters.Deaths)), scale_range=(2,30))\n    ),\n    graphic = S(:stroke=>:black,:opacity=>0.8)Circle()\n)\n\n\ndraw(plt, height=500)","category":"page"}]
}
